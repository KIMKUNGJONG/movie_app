{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenres","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8PC+DxC,SAASC,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAG1D,SAASC,EAATC,GAA6B,IAAPC,EAAOD,EAAPC,MAClB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,iBAAiBG,GAiB1BC,MAjEf,SAAAC,GAAiD,IAAjCN,EAAiCM,EAAjCN,MAAON,EAA0BY,EAA1BZ,OAAQa,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAI,SAACL,EAAMM,GAAP,OAAiBd,EAAAC,EAAAC,cAACI,EAAD,CAAaE,MAAOA,EAAOO,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACfL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,gBCmDbC,oNAxEbC,MAAQ,KAsCRC,cAAgB,WAUd,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACnC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACLxB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAKtBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACZf,WAHS,wBAAAU,EAAAM,SAAAT,QAMbM,SAAW,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAxB1BG,KAAKpB,8CA0BE,IACCN,EAAW0B,KAAK7B,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAC9B0B,KAAK7B,MAAMG,OAAS0B,KAAK5B,gBAAkB,kBA7ElC6B,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.df23e6e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react'; //컴포넌트가 없으니 React, { Component } from 'react'; 에서 { Component }를 삭제한다.\r\nimport PropTypes from 'prop-types';\r\nimport LineEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n/*\r\nclass Movie extends Component{\r\n\r\n    static propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string.isRequired\r\n    }//부모 prop에서 받아오는 정보 validate함.\r\n\r\n    render(){\r\n        \r\n        return (\r\n        <div>\r\n            <MoviePoster poster={this.props.poster} />\r\n            <h1>{this.props.title}</h1>\r\n        </div>\r\n        )\r\n    }\r\n}*/\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre,index) => <MovieGenres genre={genre} key={index} /> )}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                <LineEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis=' ...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )   \r\n}\r\n/* state가 있는 컴포넌트\r\nclass MoviePoster extends Component{ \r\n    //Movie에서 prop을 설정해주지 않으면 자식 컴포넌트인 MoviePoster에 Prop이 내려오지 않는다.\r\n    //부모의 자식에 ~ 자식 이런식으로 점점 Prop이 내려오는걸 알수있음.\r\n\r\n    static propTypes = {\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <img src={this.props.poster} alt={this.props.title} />\r\n        )\r\n    }\r\n}\r\n*/\r\n// 단순하게 return만을 위한 stateless 펑션. props만 받아서 리턴을 한다.\r\nfunction MoviePoster({poster, alt}){\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\nfunction MovieGenres({genre}){\r\n    return(\r\n        <span className=\"Movie__Genres\">{genre}</span>\r\n    )\r\n}\r\nMovie.propTypes = {\r\n    title:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired,\r\n    genres:PropTypes.array.isRequired,\r\n    synopsis:PropTypes.string.isRequired\r\n}\r\nMoviePoster.propTypes = {\r\n    poster : PropTypes.string.isRequired,\r\n    alt : PropTypes.string.isRequired\r\n}\r\nMovieGenres.propTypes = {\r\n    genre : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\nimport { __await } from 'tslib';\r\nimport cors from 'cors';\r\n\r\nclass App extends Component {\r\n\r\n  // render : componentWillMount() -> render() -> componentDidMount()\r\n\r\n  /* update : componentWillRecieveProps() 새로운 prop받음 ->\r\n              shouldComponentUpdate() == true 새로 받은 prop과 비교를 한뒤 old prop과 다르다면 ->\r\n              componentWillUpdate() 컴포넌트는 업데이트를 실행 ->\r\n              render() 랜더링 작업을 실행 ->\r\n              componentDidUpdate() 컴포넌트 업데이트 결과 보여줌\r\n  */\r\n  // state : state가 바뀔때마다 다시 render() 된다. state선언은 컴포넌트를 로드하는 방법.\r\n  state = {}\r\n  componentDidMount(){\r\n    /*\r\n    setTimeout(() => {\r\n      this.setState({\r\n          // 기존의 리스트는 유지하고 그 뒤로 영화를 추가함. 삭제할경우 추가되는 영화만 보이게됨\r\n          // 위치에따라 신규로 또는 이전으로 보이게 가능.\r\n          // map-> {this.state.movies.map((movie, index) => {  return <Movie title={movie.title} poster={movie.poster} key={index} />  })}\r\n          movies: [\r\n            {\r\n              title:\"Avengers\",\r\n              poster:\"https://am24.akamaized.net/tms/cnt/uploads/2018/09/avengers-4-promo-leak-1200x673.jpg\"\r\n            },\r\n            {\r\n              title:\"SpiderMan\",\r\n              poster:\"https://cnet1.cbsistatic.com/img/ZkRSkj-fvyazv_fdJYtHzjDzYZo=/2018/08/01/c915c669-30a3-494a-880b-bfc44d8c04e2/spider-man-ps4-preview-glass.jpg\",\r\n            },\r\n            {\r\n              title:\"Hulk\",\r\n              poster:\"https://media.wired.com/photos/59b83283b412f33ba9daa3f5/master/pass/thehulk-FA.jpg\",\r\n            },\r\n            {\r\n              title:\"Thor\",\r\n              poster:\"http://digitalspyuk.cdnds.net/18/09/640x347/gallery-1519729389-thor-ragnarok-reviews-big.jpg\",\r\n            },\r\n            {\r\n              title:\"IronMan\",\r\n              poster:\"https://cdn.britannica.com/s:500x350/26/187026-049-BC380C8A.jpg\"\r\n            },\r\n            {\r\n              title:\"Captain America\",\r\n              poster:\"https://image.ytn.co.kr/general/jpg/2018/0323/201803231620064718_d.jpg\"\r\n            }\r\n          ]\r\n      })\r\n    },2000) */\r\n    this._getMovies()\r\n  }\r\n  _renderMovies = () => { //기본 펑션과 내 제작 펑션의 구분을 위해 _를 붙여 만든다.\r\n    const movies = this.state.movies.map(movie => {\r\n      return <Movie \r\n        title={movie.title_english}\r\n        poster={movie.medium_cover_image}\r\n        key={movie.id}\r\n        genres={movie.genres}\r\n        synopsis={movie.synopsis}\r\n      />  \r\n    })\r\n    return movies\r\n  }\r\n  _getMovies = async () => {\r\n    const movies = await this._callApi() //callApi의 return value를 movies 변수에 적용한다.\r\n    this.setState({\r\n      movies\r\n    })\r\n  }\r\n  _callApi = () => {\r\n    return fetch('https://yts.mx/api/v2/list_movies.json?sort_by=download_count')\r\n    .then(response => response.json())//then은 fetch의 결과물을 오직 한개의 attr로 받아온다.\r\n    .then(json => json.data.movies)\r\n    .catch(err => console.log(err))\r\n  }\r\n  render() {\r\n    const { movies } = this.state;\r\n    return (\r\n      <div className={movies ? \"App\" : \"App--loading\"}>\r\n        {this.state.movies ? this._renderMovies() : 'Loading'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}